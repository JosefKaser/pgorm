group main;

usings(lib) ::=<<
using <lib>;
>>

factory(libs,namespace,table,getby_methods,dml_functions) ::=<<
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Reflection;
<libs:usings(); separator="\r\n">

namespace <namespace>
{
	#region <table.FactoryName>
	public class <table.FactoryName>
	{
		<dml_functions; separator="\r\n">
		<getby_methods; separator="\r\n">
		#region CreateFromReader
        /// \<summary\>
        /// ObjectRelationMapper for table [<table.TableName>]
        /// \</summary\>
        /// \<param name="reader"\>An IDataReader from DataAccess.ExecuteObjectQuery\</param\>
        /// \<returns\>An object of type <table.TemplateTableName>\</returns\>		
        public static <table.TemplateTableName> CreateFromReader(IDataReader reader)
        {
            <table.TemplateTableName> result = new <table.TemplateTableName>();
            <table.Columns:idatareader_converter(); separator="\r\n">
            result.RecordStatus = RecordStatus.Default;
            return result;
        }
        #endregion        
	}
	#endregion
}
>>

get_all_method(table) ::=<<
#region AppendFromReader
/// \<summary\>
/// Dynamic Object Relation Mapper for table [<table.TableName>], uses reflection to find matching properties 
/// for each column and tries to set the proper value
/// \</summary\>
/// \<typeparam name="T"\>Parameter of type <table.TemplateTableName>\</typeparam\>
/// \<param name="reader"\>An IDataReader from DataAccess.ExecuteObjectQuery\</param\>
/// \<param name="dataObject"\>An object of type <table.TemplateTableName>\</param\>
/// \<returns>An object with public properties matching columns in table [<table.TableName>]\</returns\>        
public static T AppendFromReader\<T\>(IDataReader reader,T dataObject) where T : DbObjectBase
{
    if (dataObject == null)
    {
        throw new NullReferenceException("dataObject is null");
    }
    else
    {
        PropertyInfo[] props = dataObject.GetType().GetProperties();
        foreach (PropertyInfo prop in props)
        {
            <table.Columns:idatareader_append_converter(); separator="\r\n">
        }
    }
    return dataObject;
}
#endregion        

#region Record Count
/// \<summary\>
/// Provides record count for table [<table.TableName>] in the current transaction.
/// \</summary\>
/// \<returns\>long record count.\</returns\>		
public static long GetCurrentCount()
{
	return DataAccess.ExecuteScalarQuery\<long\>(
				string.Format(Helper.SQL_SELECT_COUNT,
					<table.TemplateTableName>.TABLE_NAME)
				);
}
#endregion	

#region GetAll
/// \<summary\>
/// Retrives all records in table [<table.TableName>]
/// \</summary\>
/// \<param name="p_SortOperation"\>A SortOperation list for added ORDER BY to the query\</param\>        
/// \<param name="p_PagingOperation"\>A PagingOperation for adding recordset paging\</param\>		
/// \<returns\><table.RecordsetName>\</returns\>		
public static <table.RecordsetName> GetAll(SortOperation p_SortOperation,PagingOperation p_PagingOperation)
{
	string sopr = "",popr="",opr=" ";
	if(p_SortOperation != null)
		sopr = p_SortOperation.ToString();
		
	if(p_PagingOperation != null)
		popr = p_PagingOperation.ToString();
		
	opr = string.Format("{0} {1}",sopr,popr);
		
	return <table.RecordsetName>.FromList(
		DataAccess.ExecuteObjectQuery\<<table.TemplateTableName>\>
		(
			string.Format(Helper.SQL_SELECT,<table.TemplateTableName>.TABLE_NAME,
			opr),
			CreateFromReader
        )
	);
}

/// \<summary\>
/// Retrives all records in table [<table.TableName>] with sorting
/// \</summary\>
/// \<param name="p_SortOperation"\>A SortOperation list for added ORDER BY to the query\</param\>		        
/// \<returns\><table.RecordsetName>\</returns\>		
public static <table.RecordsetName> GetAll(SortOperation p_SortOperation)
{
	return GetAll(p_SortOperation,null);
}

/// \<summary\>
/// Retrives all records in table [<table.TableName>] with paging
/// \</summary\>
/// \<param name="p_PagingOperation"\>A PagingOperation for adding recordset paging\</param\>        
/// \<returns\><table.RecordsetName>\</returns\>		
public static <table.RecordsetName> GetAll(PagingOperation p_PagingOperation)
{
	return GetAll(null,p_PagingOperation);
}


/// \<summary\>
/// Retrives all records in table [<table.TableName>]
/// \</summary\>
/// \<returns\><table.RecordsetName>\</returns\>		
public static <table.RecordsetName> GetAll()
{
	return GetAll(null,null);
}
#endregion

>>

idatareader_converter(column) ::=<<
result.<column.TemplateColumnName>.DbValue = reader[<table.TemplateTableName>.COL_<column.TemplateColumnName>];
>>

idatareader_append_converter(column) ::=<<
#region <column.TemplateColumnName>
if (prop.Name.ToLower() == <table.TemplateTableName>.COL_<column.TemplateColumnName>.ToLower())
{
	dataObject.GetType().InvokeMember
	(
		prop.Name,
		BindingFlags.SetProperty,
		null,
		dataObject,
		new object[] { new DbObjectValue\<<column.CLR_Type><column.CLR_Nullable>\>() { DbValue = reader[<table.TemplateTableName>.COL_<column.TemplateColumnName>] } }
	);
	dataObject.RecordStatus = RecordStatus.Default;
}
#endregion
		
>>

create_getby_method(table,icolumns) ::=<<
#region <create_getby_method_name(icolumns)>
/// \<summary\>
/// Retrives a <table.RecordsetName> from <table.TableName>
/// \</summary\>
/// \<param name="p_SortOperation"\>A SortOperation list for adding row ordering\</param\>
/// \<param name="p_PagingOperation"\>A PagingOperation for adding recordset paging\</param\>        
<icolumns:create_inteli_param(); separator="\r\n">
/// \<returns\>A <table.RecordsetName>\</returns\>
public static <table.RecordsetName> <create_getby_method_name(icolumns)>(<create_parameters(icolumns)>,SortOperation p_SortOperation,PagingOperation p_PagingOperation)
{
	string sopr = "",popr="",opr=" ";
	if(p_SortOperation != null)
		sopr = p_SortOperation.ToString();
		
	if(p_PagingOperation != null)
		popr = p_PagingOperation.ToString();
		
	opr = string.Format("{0} {1}",sopr,popr);

	return <table.RecordsetName>.FromList(
					DataAccess.ExecuteObjectQuery\<<table.TemplateTableName>\>
					(
						string.Format(
							Helper.SQL_SELECT_WHERE, "*",
							<table.TemplateTableName>.TABLE_NAME,"<icolumns:create_sql_asign_parameter(); separator=" AND ">",
							opr),
						CreateFromReader,
						<icolumns:create_npgsql_newparameter(); separator=",\r\n">
					));
}

/// \<summary\>
/// Retrives a <table.RecordsetName> from <table.TableName>
/// \</summary\>
<icolumns:create_inteli_param(); separator="\r\n">
/// \<returns\>A <table.RecordsetName>\</returns\>
public static <table.RecordsetName> <create_getby_method_name(icolumns)>(<create_parameters(icolumns)>)
{
	return <create_getby_method_name(icolumns)>(<create_call_parameters(icolumns)>,null,null);
}

/// \<summary\>
/// Retrives a <table.RecordsetName> from <table.TableName> with sorting
/// \</summary\>
/// \<param name="p_SortOperation"\>A SortOperation list for adding row ordering\</param\>
<icolumns:create_inteli_param(); separator="\r\n">
/// \<returns\>A <table.RecordsetName>\</returns\>
public static <table.RecordsetName> <create_getby_method_name(icolumns)>(<create_parameters(icolumns)>,SortOperation p_SortOperation)
{
	return <create_getby_method_name(icolumns)>(<create_call_parameters(icolumns)>,p_SortOperation,null);
}

/// \<summary\>
/// Retrives a <table.RecordsetName> from <table.TableName> with paging
/// \</summary\>
/// \<param name="p_PagingOperation"\>A PagingOperation for adding recordset paging\</param\>        
<icolumns:create_inteli_param(); separator="\r\n">
/// \<returns\>A <table.RecordsetName>\</returns\>
public static <table.RecordsetName> <create_getby_method_name(icolumns)>(<create_parameters(icolumns)>,PagingOperation p_PagingOperation)
{
	return <create_getby_method_name(icolumns)>(<create_call_parameters(icolumns)>,null,p_PagingOperation);
}


#endregion

>>


create_update_method(table,icolumns) ::=<<
#region <create_updateby_method_name(icolumns)>
/// \<summary\>
/// Updates records in table [<table.TableName>]
/// \</summary\>
<icolumns:create_inteli_param(); separator="\r\n">
/// \<returns\><table.TemplateTableName>\</returns\>
public static <table.TemplateTableName> <create_updateby_method_name(icolumns)>(<table.TemplateTableName> p_<table.TemplateTableName>,<create_parameters(icolumns)>)
{
	string sqlStatement = "";
	DbParameter[] dbParams = null;
		
	List\<OperationParameter\> oprParams = new List\<OperationParameter\>();
	
	#region Implicit value assignment.
	<table.DMLColumns:create_implicit_check();separator="\r\n">	
	#endregion
	
    if (oprParams.Count != 0)
    {
		List\<OperationParameter\> updateKeys = new List\<OperationParameter\>();
		updateKeys.AddRange(
			new OperationParameter[] 
			{ 
				<icolumns:create_update_opr_param_from_method();separator=",\r\n">
			}
		);
			
		UpdateOperation updateOpr = new UpdateOperation(oprParams,updateKeys);
		sqlStatement = string.Format(Helper.SQL_UPDATE,
			<table.TemplateTableName>.TABLE_NAME,
			updateOpr.UpdateColumns,
			updateOpr.UpdateArguments);
			
		dbParams = updateOpr.DbParameters;
		
		List\<<table.TemplateTableName>\> result = DataAccess.ExecuteObjectQuery\<<table.TemplateTableName>\>
		(
			sqlStatement,
			CreateFromReader,
			dbParams
		);			
		
		if(result.Count != 0)
		{           
			result[0].RecordStatus = RecordStatus.Default;                    
			return result[0];
		}
		else
		{
			return null;
		}
	}
    else
    {
        throw new OperationCanceledException("Unable to update an empty [<table.TemplateTableName>] into the database");
    }	
}
#endregion

>>

create_inteli_param(column) ::=<<
/// \<param name="p_<column.TemplateColumnName>"\><column.CLR_Description>\</param\>
>>

create_getby_method_name(columns) ::=<<
GetBy_<columns:create_method_name_part(); separator="_">
>>

create_updateby_method_name(columns) ::=<<
UpdateBy_<columns:create_method_name_part(); separator="_">
>>

create_deleteby_method_name(columns) ::=<<
DeleteBy_<columns:create_method_name_part(); separator="_">
>>


create_method_name_part(column) ::="<column.TemplateColumnName>"

create_parameters(columns) ::=<<
<columns:create_parameter(); separator=",">
>>	

create_call_parameters(columns) ::=<<
<columns:create_call_parameter(); separator=",">
>>	


create_parameter(column) ::="<column.CLR_Type> p_<column.TemplateColumnName>"

create_call_parameter(column) ::="p_<column.TemplateColumnName>"

create_sql_asign_parameter(column) ::=" \\\"<column.TemplateColumnName>\\\"=@<column.TemplateColumnName> "

create_npgsql_newparameter(column) ::=<<
DataAccess.NewParameter("@<column.TemplateColumnName>",p_<column.TemplateColumnName>)
>>


create_insert_method(table) ::=<<
#region Save
/// \<summary\>
/// Save, insert or updates a new <table.TemplateTableName> into the database.
/// The properties for which a null value is assigned will not be included in the 
/// insert or update operation. In order to set a given column to NULL (SQL), use 
/// \<code\>
/// object.property = DBNull.Value;
/// \</code\>
/// \</summary\>
/// \<param name=""\>\</param\>
/// \<returns\>An object of <table.TemplateTableName> or null when nothing has been updated.\</returns\>
public static <table.TemplateTableName> Save(<table.TemplateTableName> p_<table.TemplateTableName>)
{
	string sqlStatement = "";
	DbParameter[] dbParams = null;
		
	List\<OperationParameter\> oprParams = new List\<OperationParameter\>();
	
	#region Implicit value assignment.
	<table.DMLColumns:create_implicit_check();separator="\r\n">	
	#endregion
	
    if (oprParams.Count != 0)
    {
		if(p_<table.TemplateTableName>.RecordStatus == RecordStatus.New)
		{
			InsertOperation insertOpr = new InsertOperation(oprParams);
			
			sqlStatement = string.Format(Helper.SQL_INSERT_INTO,
				<table.TemplateTableName>.TABLE_NAME,
				insertOpr.InsertColumns,
				insertOpr.InsertArguments);
				
			dbParams = insertOpr.DbParameters;
		}
		else if (p_<table.TemplateTableName>.RecordStatus == RecordStatus.Changed)
		{
			List\<OperationParameter\> updateKeys = new List\<OperationParameter\>();
			updateKeys.AddRange(
				new OperationParameter[] 
				{ 
					<table.PrimaryKey.Columns:create_update_opr_param();separator=",\r\n">
				}
			);
			
			if(updateKeys.Count != 0)
			{
				UpdateOperation updateOpr = new UpdateOperation(oprParams,updateKeys);
				sqlStatement = string.Format(Helper.SQL_UPDATE,
					<table.TemplateTableName>.TABLE_NAME,
					updateOpr.UpdateColumns,
					updateOpr.UpdateArguments);
					
				dbParams = updateOpr.DbParameters;
			}
			else
			{
				throw new InvalidOperationException("Unable to update this <table.TemplateTableName>.\nThere is no PRIMARY KEY for table <table.TableName>");
			}
		}
		
		List\<<table.TemplateTableName>\> result = DataAccess.ExecuteObjectQuery\<<table.TemplateTableName>\>
		(
			sqlStatement,
			CreateFromReader,
			dbParams
        );			
            
		if(result.Count != 0)
		{           
			result[0].RecordStatus = RecordStatus.Default;                    
			return result[0];
		}
		else
		{
			return null;
		}		
    }
    else
    {
        throw new OperationCanceledException("Unable to insert/update an empty [<table.TemplateTableName>] into the database");
    }	
}
#endregion

>>

create_implicit_check(column) ::=<<
if (p_<column.TemplateTableName>.<column.TemplateColumnName>.DbValue != null)
    oprParams.Add(new OperationParameter() { DbValue = p_<column.TemplateTableName>.<column.TemplateColumnName>.DbValue, ColumnName = <column.TemplateTableName>.COL_<column.TemplateColumnName>_Db, ParameterName = "@" + <column.TemplateTableName>.COL_<column.TemplateColumnName> });
    
>>

create_update_opr_param(column) ::=<<
new OperationParameter() { DbValue = p_<column.TemplateTableName>.<column.TemplateColumnName>.DbValue, ColumnName = <column.TemplateTableName>.COL_<column.TemplateColumnName>_Db, ParameterName = "@UPD_" + <column.TemplateTableName>.COL_<column.TemplateColumnName> }
>>

create_update_opr_param_from_method(column) ::=<<
new OperationParameter() { DbValue = p_<column.TemplateColumnName>, ColumnName = <column.TemplateTableName>.COL_<column.TemplateColumnName>_Db, ParameterName = "@UPD_" + <column.TemplateTableName>.COL_<column.TemplateColumnName> }
>>

create_inert_column_name(column) ::="\\\"<column.TemplateColumnName>\\\""


create_delete_method(table,icolumns) ::=<<
#region <create_deleteby_method_name(icolumns)>
/// \<summary\>
/// Deletes records in table [<table.TableName>]
/// \</summary\>
<icolumns:create_inteli_param(); separator="\r\n">
public static void <create_deleteby_method_name(icolumns)>(<create_parameters(icolumns)>)
{
	string sqlStatement = "";
	DbParameter[] dbParams = null;		
	List\<OperationParameter\> oprParams = new List\<OperationParameter\>();
	oprParams.AddRange(
	new OperationParameter[] 
		{ 
			<icolumns:create_update_opr_param_from_method();separator=",\r\n">
		}
	);
			
	DeleteOperation deleteOpr = new DeleteOperation(oprParams);
	sqlStatement = string.Format(Helper.SQL_DELETE_WHERE,
		<table.TemplateTableName>.TABLE_NAME,
		deleteOpr.DeleteArguments);
		
	dbParams = deleteOpr.DbParameters;		
	DataAccess.ExecuteNoneQuery(sqlStatement,dbParams);					
}
#endregion

>>
