group main;

usings(lib) ::=<<
using <lib>;
>>

dataobject(libs,namespace,table,properties) ::=<<
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Reflection;
<libs:usings(); separator="\r\n">

namespace <namespace>
{
	#region <table.TemplateTableName>
	public class <table.TemplateTableName> : DbObjectBase
	{
		#region Static Properties
		public static readonly string TABLE_NAME = "\"<table.TableName>\"";
		<table.Columns:static_db_column_name(); separator="\r\n">
		#endregion				
		<table.Columns:property(); separator="\r\n">
	}
	#endregion
}
>>

static_db_column_name(column) ::=<<
public static readonly string COL_<column.TemplateColumnName> = "<column.ColumnName>";
public static readonly string COL_<column.TemplateColumnName>_Db = "\"<column.ColumnName>\"";
>>


property(column) ::=<<
#region <column.TemplateColumnName>
protected  DbObjectValue\<<column.CLR_Type><column.CLR_Nullable>\> p_<column.TemplateColumnName> = 
		new DbObjectValue\<<column.CLR_Type><column.CLR_Nullable>\>();
/// \<summary\>
/// <column.CLR_Description>
/// \</summary\>		
public  DbObjectValue\<<column.CLR_Type><column.CLR_Nullable>\> <column.TemplateColumnName> 
{
	get
	{
		return p_<column.TemplateColumnName>;		
	}
	set
	{
		p_<column.TemplateColumnName> = value;
		if(this.RecordStatus != RecordStatus.New)
			this.RecordStatus = RecordStatus.Changed;
	}
}
#endregion
>>

