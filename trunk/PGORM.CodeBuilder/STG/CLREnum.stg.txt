group main;

usings(lib) ::=<<
using <lib>;
>>

generic(T) ::="\<<T>\>"

create_enum(libs,namespace,table) ::=<<
using System;
using System.Collections.Generic;
using Npgsql;
<libs:usings(); separator="\r\n">

namespace <namespace>.Enum
{
    #region <table.TemplateRelationName>
    public enum <table.TemplateRelationName>
    {
        <table.Columns:enum_item(); separator=",\r\n">
    }
    #endregion

    #region <table.TemplateRelationName>Converter
    [PostgreSQLTypeConverterAttribute()]
    public class <table.TemplateRelationName>Converter : IPostgreSQLTypeConverter
    {
        public object FromString(string data)
        {
            <table.Columns:from_string_parse(); separator="\r\n">
            throw new NotImplementedException(string.Format("Enum value {0} is not implemented.",data));
        }
    
        public string PgType()
        {
            return "<table.RelationName>";
        }

        public string PgTypeSchema()
        {
            return "<table.SchemaName>";
        }

        public Type CLRType()
        {
            return typeof(<namespace>.Enum.<table.TemplateRelationName>);
        }
        
        public string ToString(object obj)
        {
            return obj.ToString();
        }
    }
    #endregion
}

>>

enum_item(column) ::=<<
    <column.TemplateColumnName>
>>

from_string_parse(column) ::=<<
if(data == <column.TemplateRelationName>.<column.TemplateColumnName>.ToString())
    return <column.TemplateRelationName>.<column.TemplateColumnName>;
>>
