group main;

usings(lib) ::=<<
using <lib>;
>>

dataobject(libs,namespace,table,properties,is_udt) ::=<<
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Reflection;
<libs:usings(); separator="\r\n">

namespace <namespace>
{
	#region <table.TemplateRelationName>
	public class <table.TemplateRelationName> : DataObjectBase
	{
		#region ctor
		public <table.TemplateRelationName>()
		{
		}
		#endregion
		
		#region Static Properties
		public static readonly string RELATION_NAME = "\"<table.SchemaName>\".\"<table.RelationName>\"";
		<table.Columns:static_db_column_name(); separator="\r\n">
		#endregion				
		<table.Columns:property(); separator="\r\n">
	}
	#endregion

    <if(is_udt)>
    #region <table.TemplateRelationName>Converter
    [PostgreSQLTypeConverterAttribute()]
    public class <table.TemplateRelationName>Converter : IPostgreSQLTypeConverter
    {
        public object FromString(string data)
        {
            throw new NotImplementedException(string.Format("Enum value {0} is not implemented.",data));
        }
    
        public string PgType()
        {
            return "<table.RelationName>";
        }

        public string PgTypeSchema()
        {
            return "<table.SchemaName>";
        }

        public Type CLRType()
        {
            return typeof(<namespace>.<table.TemplateRelationName>);
        }
        
        public string ToString(object obj)
        {
            Console.WriteLine(obj.ToString());
            return obj.ToString();
        }
    }
    #endregion
    <endif>
}
>>

static_db_column_name(column) ::=<<
internal static readonly string COL_<column.TemplateColumnName>_CLR = "<column.ColumnName>";
<code_summary({Represents the explicit and quoted database column name to be used in SQL queries.})>
public static readonly string COL_<column.TemplateColumnName>_Quoted = "\"<column.ColumnName>\"";
>>


property(column) ::=<<
#region <column.TemplateColumnName>
protected  DataObjectValue\<<column.CLR_Type><column.CLR_Nullable>\> p_<column.TemplateColumnName> = 
		new DataObjectValue\<<column.CLR_Type><column.CLR_Nullable>\>();
<code_summary({<column.CLR_Description>})>		
public  DataObjectValue\<<column.CLR_Type><column.CLR_Nullable>\> <column.TemplateColumnName> 
{
	get
	{
		return p_<column.TemplateColumnName>;		
	}
	set
	{
		p_<column.TemplateColumnName> = value;
		if(this.EntityStatus != EntityStatus.New)
			this.EntityStatus = EntityStatus.Changed;
	}
}
#endregion
>>

code_summary(text) ::=<<
/// \<summary\>
/// <text>
/// \</summary\>
>>
