group main;


usings(lib) ::=<<
using <lib>;
>>

factory(libs,namespace,table,methods) ::=<<
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Diagnostics;
using Npgsql;
<libs:usings(); separator="\r\n">

namespace <namespace>.Factory
{
	#region <table.FactoryName>
	<code_summary({Factory class for relation <table.RelationName>})>
	public class <table.FactoryName>
	{
		<methods; separator="\r\n">
		#region CreateFromReader
        <code_summary({ObjectRelationMapper for table [<table.RelationName>].})>
        <inteli_param(name={reader},desc={An IDataReader from DataAccess.ExecuteObjectQuery.})>
        <inteli_returns_table(table)>
        <inteli_type_param_table(table)>
        public static T CreateFromReader<generic("T")>(IDataReader reader) where T : <table.TemplateRelationName>,new()
        {
            T result = new T();
            <table.Columns:idatareader_converter(); separator="\r\n">
            result.EntityStatus = EntityStatus.Default;
            return result;
        }
        #endregion        
	}
	#endregion
}
>>

/******************************************************************************************/
getall_method(table) ::=<<
#region getall_method
<code_summary({Retrives the entire content of table [<table.TemplateRelationName>]})>
<inteli_type_param_table(table)>
<inteli_type_param_list(table)>
<inteli_tans()>
<inteli_returns_table_list(table)>
public static R GetAll<generic("T,R")>(NpgsqlTransaction p_Transaction) where T : <table.TemplateRelationName>,new() where R : List\<T\>,new()
{
	return DataAccess.ExecuteObjectQuery<generic("T,R")>(
			string.Format(Helper.SQL_SELECT,<table.TemplateRelationName>.RELATION_NAME,""),
			CreateFromReader<generic("T")>,
			p_Transaction
        );
}
#endregion

#region getall_method
<code_summary({Retrives the entire content of table [<table.TemplateRelationName>]})>
<inteli_type_param_table(table)>
<inteli_type_param_list(table)>
<inteli_returns_table_list(table)>
public static R GetAll<generic("T,R")>() where T : <table.TemplateRelationName>,new() where R : List\<T\>,new()
{
	return DataAccess.ExecuteObjectQuery<generic("T,R")>(
			string.Format(Helper.SQL_SELECT,<table.TemplateRelationName>.RELATION_NAME,""),
			CreateFromReader<generic("T")>,
			null
        );
}
#endregion

>>

/******************************************************************************************/

insert_method(table) ::=<<
#region insert_method
<code_summary({Inserts a new record into table [<table.RelationName>] based on an object 
/// of type <table.TemplateRelationName>. This method updates the [ref p_<table.TemplateRelationName>]
/// with the latest affected column values.})>
<inteli_param(name={p_<table.TemplateRelationName>},desc={A ref object of type <table.TemplateRelationName>.})>
<inteli_type_param_table(table)>
public static void Insert\<T\>(ref T p_<table.TemplateRelationName>) where T : <table.TemplateRelationName>,new()
{
	Insert\<T\>(ref p_<table.TemplateRelationName>,null);
}

<code_summary({Inserts a new record into table [<table.RelationName>] based on an object 
/// of type <table.TemplateRelationName>. This method updates the [ref p_<table.TemplateRelationName>]
/// with the latest affected column values.})>
<inteli_param(name={p_<table.TemplateRelationName>},desc={A ref object of type <table.TemplateRelationName>.})>
<inteli_type_param_table(table)>
<inteli_tans()>
public static void Insert\<T\>(ref T p_<table.TemplateRelationName>,NpgsqlTransaction p_Transaction) where T : <table.TemplateRelationName>,new()
{
	string sqlStatement = "";
	DbParameter[] dbParams = null;
		
	List\<OperationParameter\> oprParams = new List\<OperationParameter\>();
	
	#region Implicit value assignment.
	<table.DMLColumns:create_implicit_check();separator="\r\n">	
	#endregion
	
    if (oprParams.Count != 0)
    {
		if(p_<table.TemplateRelationName>.EntityStatus == EntityStatus.New)
		{
			InsertOperation insertOpr = new InsertOperation(oprParams);
			
			sqlStatement = string.Format(Helper.SQL_INSERT_INTO,
				<table.TemplateRelationName>.RELATION_NAME,
				insertOpr.InsertColumns,
				insertOpr.InsertArguments);
				
			dbParams = insertOpr.DbParameters;
		}
		
		List\<T\> result = DataAccess.ExecuteObjectQuery\<T\>
		(
			sqlStatement,
			CreateFromReader<generic("T")>,
			p_Transaction,
			dbParams
        );			
            
		if(result.Count != 0)
		{           
			result[0].EntityStatus = EntityStatus.Default;
			p_<table.TemplateRelationName> = result[0];
		}
    }
    else
    {
        throw new OperationCanceledException("Unable to insert/update an empty [<table.TemplateRelationName>] into the database");
    }	
}
#endregion

>>

/*******************************************************************/

getby_single_return_method(table,icolumns,index) ::=<<
#region getby_single_return_method
<code_summary({Returns a single object of type [<table.TemplateRelationName>] based on [<index.IndexType> / <index.Indexname>].})>
<icolumns:inteli_param_column(); separator="\r\n">
<inteli_tans()>
<inteli_type_param_table(table)>
<inteli_returns_table(table)>
public static T <create_getby_method_name(icolumns)><generic("T")>(<create_parameters(icolumns)>,NpgsqlTransaction p_Transaction) where T : <table.TemplateRelationName>,new()
{
	T result = DataAccess.ExecuteSingleObjectQuery<generic("T")>(
						string.Format(Helper.SQL_SELECT_WHERE, "*",
									  <table.TemplateRelationName>.RELATION_NAME,"<icolumns:create_sql_asign_parameter(); separator=" AND ">",
							           ""),
						CreateFromReader<generic("T")>,
						p_Transaction,
						<icolumns:create_npgsql_newparameter(); separator=",\r\n">
					);
	result.EntityStatus = EntityStatus.Default;
	return result;
}

<code_summary({Returns a single object of type [<table.TemplateRelationName>] based on [<index.IndexType> / <index.Indexname>]})>
<icolumns:inteli_param_column(); separator="\r\n">
<inteli_type_param_table(table)>
<inteli_returns_table(table)>
public static T <create_getby_method_name(icolumns)><generic("T")>(<create_parameters(icolumns)>) where T : <table.TemplateRelationName>,new()
{
	return <create_getby_method_name(icolumns)><generic("T")>(<create_call_parameters(icolumns)>,null);
}

#endregion

>>

/*******************************************************************/

inteli_returns(text) ::="/// \<returns\><text>\</returns\>"

inteli_returns_table(table) ::="/// \<returns\>An object of type [<table.TemplateRelationName>].\</returns\>"
inteli_returns_table_list(table) ::="/// \<returns\>A list of List&lt;<table.TemplateRelationName>&gt; of type [<table.TemplateRelationName>].\</returns\>"

inteli_type_param_table(table) ::=<<
/// \<typeparam name="T"\>An object of type [<table.TemplateRelationName>]. The (derived) class must implement a default parameterless constructor.\</typeparam\>
>>

inteli_type_param_list(table) ::=<<
/// \<typeparam name="R"\>A List&lt;&gt; of type List&lt;<table.TemplateRelationName>&gt;. The (derived) classes must implement a default parameterless constructor.\</typeparam\>
>>


inteli_type_param(name,type) ::=<<
/// \<typeparam name="<name>"\><type>\</typeparam\>
>>

inteli_param(name,desc) ::=<<
/// \<param name="<name>"\><desc>\</param\>
>>

inteli_param_column(column) ::=<<
/// \<param name="p_<column.TemplateColumnName>"\><column.CLR_Description>\</param\>
>>

inteli_tans() ::=<<
/// \<param name="p_Transaction"\>A NpgsqlTransaction object.\</param\>
>>

create_implicit_check(column) ::=<<
if (p_<column.TemplateRelationName>.<column.TemplateColumnName>.DbValue != null)
    oprParams.Add(new OperationParameter() { DbValue = p_<column.TemplateRelationName>.<column.TemplateColumnName>.DbValue, ColumnName = <column.TemplateRelationName>.COL_<column.TemplateColumnName>_Db, ParameterName = "@" + <column.TemplateRelationName>.COL_<column.TemplateColumnName> });
    
>>

create_getby_method_name(columns) ::=<<
GetBy_<columns:create_method_name_part(); separator="_">
>>

create_method_name_part(column) ::="<column.TemplateColumnName>"

idatareader_converter(column) ::=<<
#region <column.TemplateColumnName>
try
{
	result.<column.TemplateColumnName>.DbValue = reader[<table.TemplateRelationName>.COL_<column.TemplateColumnName>];
}
catch(Exception ex)
{
	if(DataAccess.ThrowMapperException)
		throw ex;
	else
		Debug.WriteLine(ex.Message);
}
#endregion
>>

create_parameters(columns) ::=<<
<columns:create_parameter(); separator=",">
>>	

create_parameter(column) ::="<column.CLR_Type> p_<column.TemplateColumnName>"

create_sql_asign_parameter(column) ::=" \\\"<column.TemplateColumnName>\\\"=@<column.TemplateColumnName> "

create_npgsql_newparameter(column) ::=<<
DataAccess.NewParameter("@<column.TemplateColumnName>",p_<column.TemplateColumnName>)
>>

create_call_parameters(columns) ::=<<
<columns:create_call_parameter(); separator=",">
>>	

create_call_parameter(column) ::="p_<column.TemplateColumnName>"

code_summary(text) ::=<<
/// \<summary\>
/// <text>
/// \</summary\>
>>

generic(T) ::="\<<T>\>"