factory(libs,namespace,table,methods) ::=<<
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Diagnostics;
using Npgsql;
<libs:usings(); separator="\r\n">

namespace <namespace>.Factory
{
	#region <table.FactoryName>
	<code_summary({Factory class for relation <table.RelationName>})>
	public class <table.FactoryName>
	{
		<methods; separator="\r\n">
		#region CreateFromReader
        <code_summary({ObjectRelationMapper for table [<table.RelationName>].})>
        <intelli_param(name={reader},desc={An IDataReader from DataAccess.ExecuteObjectQuery.})>
        <intelli_returns_table(table)>
        <intelli_type_param_table(table)>
        public static T CreateFromReader<generic("T")>(IDataReader reader) where T : <table.TemplateRelationName>,new()
        {
            T result = new T();
            <table.Columns:idatareader_converter(); separator="\r\n">
            result.EntityStatus = EntityStatus.Default;
            return result;
        }
        #endregion        
	}
	#endregion
}
>>
