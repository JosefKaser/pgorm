delete_method(table,icolumns) ::=<<
#region delete_method
<delete_summary(table)>
<icolumns:intelli_param_column(); separator="\r\n">
<intelli_tans()>
<delete_returns()>
public static int DeleteBy_<create_method_sub_name(icolumns)>(<create_parameters(icolumns)>,NpgsqlTransaction p_Transaction)
{
	return DataAccess.ExecuteNoneQuery(string.Format(Helper.SQL_DELETE_WHERE,<table.TemplateRelationName>.RELATION_NAME,"<icolumns:create_sql_asign_parameter(); separator=" AND ">",""),
						p_Transaction,
						<icolumns:create_npgsql_newparameter(); separator=",\r\n">);
}


<delete_summary(table)>
<icolumns:intelli_param_column(); separator="\r\n">
<delete_returns()>
public static int DeleteBy_<create_method_sub_name(icolumns)>(<create_parameters(icolumns)>)
{
    return DeleteBy_<create_method_sub_name(icolumns)>(<create_call_parameters(icolumns)>,null);
}

#endregion
>>

delete_summary(table) ::=<<
<code_summary({Deletes a record from <table.RelationName> and returns the number of affected records.})>
>>

delete_returns() ::=<<
<intelli_returns({Returns the number of affected records.})>
>>