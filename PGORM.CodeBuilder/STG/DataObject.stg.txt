group main;

usings(lib) ::=<<
using <lib>;
>>

dataobject(libs,namespace,table,properties,is_udt) ::=<<
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Reflection;
<libs:usings(); separator="\r\n">

namespace <namespace>
{
	#region <table.TemplateRelationName>
	public class <table.TemplateRelationName> : DataObjectBase
	{
		#region ctor
		public <table.TemplateRelationName>()
		{
		}
		#endregion
		
		#region Static Properties
		public static readonly string RELATION_NAME = "\"<table.SchemaName>\".\"<table.RelationName>\"";
		<table.Columns:static_db_column_name(); separator="\r\n">
		#endregion				
		<table.Columns:property(); separator="\r\n">
	}
	#endregion

    <if(is_udt)>
    #region <table.TemplateRelationName>Converter
    [PostgreSQLTypeConverterAttribute()]
    public class <table.TemplateRelationName>Converter : IPostgreSQLTypeConverter
    {
        public object FromString(string data)
        {
            object[] parsed_values = ArrayBackendToNativeTypeConverter.TokenEnumeration(Helper.StripUDTValue(data)).ToArray();
            <table.TemplateRelationName> result = new <table.TemplateRelationName>();
            <table.Columns:create_parse_from_string(); separator="\r\n">
            return result;
        }
    
        public string PgType()
        {
            return "<table.RelationName>";
        }

        public string PgTypeSchema()
        {
            return "<table.SchemaName>";
        }

        public Type CLRType()
        {
            return typeof(<namespace>.<table.TemplateRelationName>);
        }
        
        public string ToString(object obj)
        {
            <namespace>.<table.TemplateRelationName> entity = (<namespace>.<table.TemplateRelationName>)obj;
            if(entity != null)
            {
                <table.Columns:create_format_values(); separator="\r\n">

                return string.Format("(<table.Columns:string_format_params(); separator=",">)",
                    <table.Columns:string_format_args(); separator=",\r\n">
                    );
            }
            else
            {
                return "";
            }
        }
    }
    #endregion
    <endif>
}
>>

static_db_column_name(column) ::=<<
internal static readonly string COL_<column.TemplateColumnName>_CLR = "<column.ColumnName>";
<code_summary({Represents the explicit and quoted database column name to be used in SQL queries.})>
public static readonly string COL_<column.TemplateColumnName>_Quoted = "\"<column.ColumnName>\"";
>>

is_array(column) ::="<if(column.IsPgArray)>[]<endif>"

property(column) ::=<<
#region <column.TemplateColumnName>
protected  DataObjectValue\<<column.TemplateCLR_Type>\> p_<column.TemplateColumnName> = 
		new DataObjectValue\<<column.TemplateCLR_Type>\>();
<code_summary({<column.CLR_Description>})>		
public  DataObjectValue\<<column.TemplateCLR_Type>\> <column.TemplateColumnName> 
{
	get
	{
		return p_<column.TemplateColumnName>;		
	}
	set
	{
		p_<column.TemplateColumnName> = value;
		if(this.EntityStatus != EntityStatus.New)
			this.EntityStatus = EntityStatus.Changed;
	}
}
#endregion
>>

code_summary(text) ::=<<
/// \<summary\>
/// <text>
/// \</summary\>
>>


string_format_params(column) ::="{<column.CounterIndex>}"
string_format_args(column) ::="value_<column.CounterIndex>"

create_format_values(column) ::=<<
<if(column.HasConverter)>
<column.ConverterProxy.Converter> converter_<column.CounterIndex> = new <column.ConverterProxy.Converter>();
object value_<column.CounterIndex> = string.Format("\"{0}\"",converter_<column.CounterIndex>.ToString(entity.<column.TemplateColumnName>.Value));

<else>
object value_<column.CounterIndex> = Helper.PrepareStringValue(entity.<column.TemplateColumnName>.Value);
<endif>
>>

create_parse_from_string(column) ::=<<
<if(column.HasConverter)>
<column.ConverterProxy.Converter> converter_<column.CounterIndex> = new <column.ConverterProxy.Converter>();
result.<column.TemplateColumnName>.Value = (<column.TemplateCLR_Type>)converter_<column.CounterIndex>.FromString(parsed_values[<column.CounterIndex>] as string);

<else>
result.<column.TemplateColumnName>.Value = (<column.TemplateCLR_Type>)Convert.ChangeType(parsed_values[<column.CounterIndex>] as string,typeof(<column.TemplateCLR_Type>));
<endif>
>>